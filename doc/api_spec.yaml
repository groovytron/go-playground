openapi: 3.0.0

info:
  title: Todo API
  description: This is the documentation of a todos and tasks API
  version: 0.0.1

servers:
 - url: 'http://localhost:9000'
   description: Local development server

tags:
  - name: Todo
    description: A todo is mainly a list of tasks with a name and a description
  - name: Task
    description: A task is an item contained in a todo.

paths:
  /api/todos:
    get:
      description: List todos
      tags:
        - Todo
      parameters:
        - in: query
          name: page 
          schema:
            type: integer
          description: The page number
      responses:
        '200':
          description: A list of todos
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiPagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/TodoModel'

    post:
      description: Create a todo
      tags:
        - Todo
      requestBody:
        description: The todo you want to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoCreateModel'

      responses:
        '200':
          description: The created todo
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/TodoModel'
        '400':
          description: Submitted data is invalid
          content:
            text/plain:
              schema:
                type: string
                example: "Key: 'TodoCreateSchema.Description' Error:Field validation for 'Description' failed on the 'required' tag"


  /api/todos/{todoId}:
    get:
      description: Show a todo
      tags:
        - Todo
      parameters:
        - in: path
          name: todoId
          description: Todo ID
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: The todo data
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/TodoModel'
        '404':
          description: The todo with the given ID does not exist

    put:
      description: Update a todo
      tags:
        - Todo
      parameters:
        - in: path
          name: todoId
          description: Todo ID
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        description: The todo's new data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoCreateModel'
      responses:
        '200':
          description: The updated todo
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/TodoModel'
        '404':
          description: The todo with the given ID does not exist

    delete:
      description: Delete a todo
      tags:
        - Todo
      parameters:
        - in: path
          name: todoId
          description: Todo ID
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: The todo has been deleted
        '404':
          description: The todo with the given ID does not exist

  /api/todos/{todoId}/tasks:
    get:
      description: List a todo's tasks
      tags:
        - Task
      parameters:
        - in: query
          name: page 
          schema:
            type: integer
          description: The page number
        - in: path
          name: todoId
          description: Todo ID
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: Todo's tasks
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiPagination'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/TaskModel'

        '404':
          description: The todo with the given ID does not exist

    post:
      description: Create and add a new task to the todo
      tags:
        - Task
      parameters:
        - in: path
          name: todoId
          description: Todo ID
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        description: The task you want to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateModel'

      responses:
        '200':
          description: The created task
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/TaskModel'
        '400':
          description: Submitted data is invalid
          content:
            text/plain:
              schema:
                type: string
                example: "Key: 'TaskCreateSchema.Description' Error:Field validation for 'Description' failed on the 'required' tag"

  /api/tasks/{taskId}:
    put:
      description: Update a task
      tags:
        - Task
      parameters:
        - in: path
          name: taskId
          description: Task ID
          required: true
          schema:
            type: number
            format: int64
      requestBody:
        description: The task's new data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateModel'
      responses:
        '200':
          description: The updated task
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/TaskModel'
        '404':
          description: The task with the given ID does not exist

    delete:
      description: Delete a task
      tags:
        - Task
      parameters:
        - in: path
          name: taskId
          description: Task ID
          required: true
          schema:
            type: number
            format: int64
      responses:
        '200':
          description: The task has been deleted
        '404':
          description: The task with the given ID does not exist


components:
  schemas:
    GormBaseModel:
      description: GORM base model with attributes
      type: object
      properties:
        id:
          type: number
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date
        deletedAt:
          type: string
          format: date

    TodoModel:
      description: Todo model
      type: object
      allOf:
        - $ref: '#/components/schemas/GormBaseModel'
        - type: object
          properties:
            name:
              type: string
            description:
              type: string

    TodoCreateModel:
      description: Todo create model
      type: object
      allOf:
        - type: object
          properties:
            name:
              type: string
            description:
              type: string
          required:
            - name
            - description

    TaskModel:
      description: Task model
      type: object
      allOf:
        - $ref: '#/components/schemas/GormBaseModel'
        - type: object
          properties:
            name:
              type: string
            description:
              type: string

    TaskCreateModel:
      description: Task create model
      type: object
      allOf:
        - type: object
          properties:
            name:
              type: string
            description:
              type: string
          required:
            - name
            - description

    ApiPagination:
      description: API pagination model
      type: object
      properties:
        next:
          type: number
          format: int64
        previous:
          type: number
          format: int64
        last:
          type: number
          format: int64
        current:
          type: number
          format: int64
